# ---
class class_name {
  access_specifier :
    member1;
  access_specifier :
    member2;
  ...
};

# ---
class className {
  // default members
public:
  // public members
protected:
  // protected members
private:
  // private members
};

# ---
class class_name {
  public:
    class_name(): member_initializer_list {
      // Constructor Body
    }
};

# ---
Rectangle rect1 (3, 4);
// stored in stack
// not pointer variable

Rectangle* rect2 = new Rectangle(3, 4)
// stored in heap
// pointer variable

# ---
class X {
public:
  int a, b, i, j;
  X(int i) {
    b = i;
    this -> i = i-1;
    j = this -> i;
  }
}

# ---
class Y {
public:
  int a, b, i, j;
  Y(int i) : b(i), i(i-1), j(this -> i) { }
}

# ---
// syntax of copy constructor
class class_name {
  class_name (const class_name& other) {
    // Copy Constructor Body
  }
}

# ---
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
  
# ---
#include <iostream>
class Test {
public:
  Test() { }
  Test(const Test &t) {
    std::cout << "CopyCon" << std::endl;
  }
  Test& operator= (const Test &t){
    std::cout << "Assign" << std::endl;
    return *this; 
  }
}
int main() {
  Test t1, t2;
  t2 = t1; // "Assign"
  Test t3 = t1; // "CopyCon"
  Test t4(t1); // "CopyCon"
  return 0;
}

# ---
#include <iostream>
struct Point { int x = 3, y, z; };
int main() {
  Point p, q { 1, 2 }, r { .z = 4 };
}

# ---
class A{
 public: 
      friend class B;
 };
class A{
 private: //or nothing as the default is private
      friend class B;
 };
 
 # ---
 class Window{
    friend int Level::get(Window& w);
    int window;
public:
    Window(void): window(2) {}
    void show(void);
};
int Level::get(Window& w){
    return w.window + level;
}

# ---
class Program{
public:
  friend void display();
};
Program::input(){
  std::cout << "Hello" << std::endl;
}
int main(){
  display();
  return 0;
}
