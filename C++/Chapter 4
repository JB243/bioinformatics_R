# ---
class ParentClass {

public:

  int baseInteger;

  ParentClass() : baseInteger(0) { }

};

class ChildClass : public ParentClass {

public :

  ChildClass( ) {

    std::cout << baseInteger << std::endl; 

  }

};

# ---
Monster* m = new FireMon(); m -> critical_attack();

# ---
virtual void pureVirtualFunc() = 0; // = 0 is not actually 0

# ---
Foo(int y) : Foo('a', y) { }

# ---
template<typename T1, typename T2>

T1 add(T1 t1, T2 t2) {

    return t1 + t2;

}

# ---
template<class T>

class Pair { ... }

# ---
template<class T>

const T pi = T(3.141592L);

# ---
template<typename T>

using vector2d = vector<vector<T>>; 

# ---
