#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define count_set 200000000
/* 
	This code shows you the least length of n's array between a and b defined by Collatz's problem.
	Assumption: all counts are below maximum value of 'short' data type.
	Procedure goes as;
		1 (over)
		2 → 1 (over)
		3 → 10 → 5 → 16 → 8 → 4 → 2 (over)
		4 (over)
		5 (over)
		6 → 3 (over)
		7 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 (over) 
*/

short set[count_set + 1] = {0, };
int count;
void C2(long long int n){
	count ++;
	if(n == 1);
	else if(n % 2 == 0) C2(n / 2);
	else C2(3 * n + 1);
}

int C(long long int n){
	if(n > count_set){
	// "n > count_set" means too big number just has appeared.
		count = 0;
		C2(n);
		return count;
	}
	if(set[n] != 0) return set[n];

	// if set[n] = 0, set[n] should be filled the proper number.
	if(n % 2 == 1) set[n] = C(3 * n + 1) + 1; // n is odd
	else set[n] = C(n / 2) + 1; // n is even
	return set[n];
}

int main(int argc, char *argv[]) {
	long long int i, a, b, max_order = 1, max = 1;
	scanf("%lld %lld", &a, &b);
	set[1] = 1;
	for(i = a; i <= b; i ++){
		set[i] = C(i);
		if(set[i] > max){
			max_order = i;
			max = set[i];
		}
	}
	printf("%lld %lld", max_order, max);
	return 0;
}
