# --- 
Parent parent = new Child();

# ---
Parent parent1 = new Child(); // Intrinsic Casting
Parent parent2 = (Parent) (new Child()); // Explicit Casting

# ---
Child[] cArray = new Child[2];
cArray[0] = new Son();
cArray[1] = new Daughter();

# ---
Child child = (Child) new Parent();  // error

# ---
class Parent {
    int x = 1;
    void print(){System.out.println("Parent");}
}
class Child extends Parent {
    int x = 2;
    void print(){System.out.println("Child");}
}
public class Main {
    public static void main(String[] args) {
        Child child = new Child();
        Parent parent = (Parent) child;
        System.out.println(parent.x);   // 1
        parent.print(); // Child
    }
}

# ---
class Parent {
    int x = 1;
    void print(){System.out.println("Parent");}
}
class Child extends Parent {
    int x = 2;
    void print(){System.out.println("Child");}
}
public class Main {
    public static void main(String[] args) {
        Child child = new Child();
        Parent parent = (Parent) child;
        System.out.println(parent.x);   // 1
        parent.print(); // Child
    }
}

# ---
public class Main{
    public static void main(String[] args){
        A a1 = new A();
        A a2 = new B();
        A a3 = new D();

        a1.m2();    // "A.m2"
        a2.m2();    // "B.m2"
        a3.m2();    // "C.m2"
        ((B) a2).m1();  // "B.m1"
        // a2.m1() is error
    }
}

class A{
    public void m2(){
        System.out.println("A.m2");
    }
    public void m3(){
        System.out.println("A.m3");
    }
}

class B extends A{
    public void m1(){
        System.out.println("B.m1");
    }
    public void m2(){
        System.out.println("B.m2");
    }
}

class C extends A{
    public void m2(){
        System.out.println("C.m2");
    }
    public void m3(){
        System.out.println("C.m3");
    }
}

class D extends C{
    public void m1(){
        System.out.println("D.m1");
    }
    public void m3(){
        System.out.println("D.m3");
    }
}

# ---
class P1 {
  static int x = 2;
}

class P2 extends P1 {
  static double x = 3;
  void print() {
    System.out.println(x + " " + super.x + " " + ((P1) this).x);
  }
}

public class Main {
  public static void main(String[] args){
    P2 p = new P2();
    p.print();
    // 3 2 2
  }
}

# ---
class A{
  int a = 0;  public void add() { a++; }
}
class AA extends A{
  int a = 14;
} 
class B{
  int b = 0;  public void add() { b++; }
}
class BB extends B{
  int b = 14;  public void add() { b++; }
}
public class Main{
  public static void main(String[] agrs){
    AA a = new AA();
    BB b = new BB();
    a.add();  b.add();
    System.out.println(a.a);  // 14; hidden a = 1
    System.out.println(b.b);  // 15; hidden b = 0
  }
}

# ---
class Super{
  static String greeting() { return "Goodnight"; }
  String name() { return "Richard"; }
}

class Sub extends Super {
  static String greeting() { return "Hello"; }
  String name() { return "Henry"; }
}

public class Main {
  public static void main(String[] args){
    Super s = new Sub();
    System.out.println(s.greeting() + ", " + s.name());
    // Goodnight, Henry
  }
}

# ---
class Parent {
    int x = 1;
    static void print1(){System.out.println("Parent1");}
    void print2(){System.out.println("Parent2");}
}
class Child extends Parent {
    int x = 2;
    static void print1(){System.out.println("Child1");}
    void print2(){System.out.println("Child2");}
}
public class Main {
    public static void main(String[] args) {
        Parent person = new Child(); 
        System.out.println(person.x); // 1
        person.print1(); // Parent1
        person.print2(); // Child2
    }
}Â 

# ---
String s = "Dog" + " barks.";
s += "Too Loud!";
float f = 0.5 % 0.3;

# ---
class Wrapper<T> { 
  T obj;
  void add(T obj) { this.obj = obj; }
  T get() { return obj; }
}

# ---
class ArrayPrinter {
  public static <E> void printArray(E[] elements) {
    for(E element : elements) {
      System.out.print(element.toString() + " ");
    }
  }
}

# ---
public <T> Main (T t) { ... }
