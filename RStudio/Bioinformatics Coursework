library(dplyr)
install.packages("Seurat")
library(Seurat)

### import input_data(cellranger count output과 동일) ###
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")

### setup the seurat object ###
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)

### Preprocessing(QC) ###
### Low quality cell, mitochondria genome percent check
pbmc[["percent.mt"]] <- PercentageFeatureSet(object = pbmc, pattern = "^MT-")

### normalizing the data ###
pbmc <- NormalizeData(object = pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

### identification of highly variable features ###
pbmc <- FindVariableFeatures(object = pbmc, selection.method = "vst", nfeatures = 2000)

### scaling data ###
all.genes <- rownames(x = pbmc)
pbmc <- ScaleData(object = pbmc, features = all.genes)

### perform linear dimensional reduction ###
pbmc <- RunPCA(object = pbmc, features = VariableFeatures(object = pbmc))

### determine the "dimensionality" of the dataset
pbmc <- JackStraw(object = pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(object = pbmc, dims = 1:20)

### cluster the cells ###
pbmc <- FindNeighbors(object = pbmc, dims = 1:10)
pbmc <- FindClusters(object = pbmc, resolution = 0.5)

### Run non-linear dimensional reduction(tSNE) ###
pbmc_umap <- RunUMAP(object = pbmc, dims = 1:10)
DimPlot(object = pbmc_umap, reduction = "umap")
pbmc_tsne <- RunTSNE(object = pbmc, dims = 1:10)
DimPlot(object = pbmc_tsne, reduction = "tsne")

### Finding differentially expressed features(biomarkers) ###
pbmc.markers_umap <- FindAllMarkers(object = pbmc_umap, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers_tsne <- FindAllMarkers(object = pbmc_tsne, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

### Maybe you need this kind of data ###
umap <- DimPlot(object = pbmc_umap, reduction = "umap")
names(umap)
# [1] "data"        "layers"      "scales"      "mapping"     "theme"      
# [6] "coordinates" "facet"       "plot_env"    "labels"      "guides"     
tsne <- DimPlot(object = pbmc_tsne, reduction = "tsne")
write.csv(umap$data, "C:/Users/sun/Desktop/RESULT.csv")
write.csv(tsne$data, "C:/Users/sun/Desktop/result.csv")
write.csv(pbmc.markers_umap, "C:/Users/sun/Desktop/markers_umap.csv")
write.csv(pbmc.markers_tsne, "C:/Users/sun/Desktop/markers_tsne.csv")
