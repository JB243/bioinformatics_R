# --- 
rpy2.rinterface_lib.embedded.RRuntimeError: Error in library(ggplot2) : there is no package called 'ggplot2'


# ---
ERROR: pip's dependecy resolver does not currently take into account all the packages that are installed. This behavior is the source of the following dependency conflicts. stlearn 0.4.5 requires scikit-image>=0.19.2, but you have scikit-image 0.18.3 which is incompatible.


# ---
ImportError: cannot import name '_tsne_fix' from 'scanpy.tools'
 
 
# --- 
ValueError: m has more than 2 dimensions


# ---
TypeError: Descriptors cannot not be created directly. If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc >= 3.19.0. If you cannot immediately regenerate your protos, some other possible workarounds are: 1. Downgrade the protobuf package to 3.20.x or lower. 2. Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this will use pure-Python parsing and will be much slower).


# ---
TypeError: only length-1 arrays can be converted to Python scalars


# ---
for i in range(len(top)):
    top[i] = -math.log10(top[i])
    
    
# ---
UnicodeDecodeError: 'cp949' codec can't decode bytes in position : illegal multibyte sequence
    

# ---  
TypeError: can only concatenate str (not "int") to str


# ---
_csv.Error: field larger than field limit (131072)


# ---
import sys
import csv

csv.field_size_limit(sys.maxsize)


# ---
AttributeError: type object 'scipy.spatial.transform.rotation.Rotation' has no attribute 'from_dcm'


# ---
ERROR: Could not install packages due to an OSError: [WinError 225] Operation did not complete successfully because the file contains a virus or potentially unwanted software ... ERROR: Could not install packages due to an OSError: [WinError 225] Operation did not complete successfully because the file contains a virus or potentially unwanted software


# ---
error: OpenCV(4.6.0) D:\a\opencv-python\opencv-python\opencv\modules\imgproc\src\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'


# ---
ERROR: Could not find a version that satisfies the requirement git (from versions: none). ERROR: No matching distribution found for git

conda install git


# ---
AttributeError: 'dict' object has no attribute 'iteritems', 'iterkeys' or 'itervalues'


# ---
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_70. If you want to use the NVIDIA GeForce RTX 3090 GPU with PyTorch, please check the instruction.

pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 -f https://download.pytorch.org/whl/torch_stable.html


# ---
ImportError: DLL load failed while importing utilsextension: The specified module could not be found.

conda install -c conda-forge pytables


# ---
AttributeError: module 'tensorflow.keras.layers' has no attribute 'RandomContrast'


# ---
NotImplementedError: Cannot convert a symbolic Tensor


# ---
ModuleNotFoundError: No module named 'pydatset'

from pydatset.cifar10 import get_CIFAR10_data

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import cPickle as pickle
import numpy as np
import os


def get_CIFAR10_data(cifar10_dir, num_training=49000, num_validation=1000, num_test=1000):
    '''
    Load the CIFAR-10 dataset from disk and perform preprocessing to prepare
    it for the neural net classifier.
    '''
    # Load the raw CIFAR-10 data
    X_train, y_train, X_test, y_test = load(cifar10_dir)

    # Subsample the data
    mask = range(num_training, num_training + num_validation)
    X_val = X_train[mask]
    y_val = y_train[mask]
    mask = range(num_training)
    X_train = X_train[mask]
    y_train = y_train[mask]
    mask = range(num_test)
    X_test = X_test[mask]
    y_test = y_test[mask]

    X_train = X_train.astype(np.float64)
    X_val = X_val.astype(np.float64)
    X_test = X_test.astype(np.float64)

    # Transpose so that channels come first
    X_train = X_train.transpose(0, 3, 1, 2)
    X_val = X_val.transpose(0, 3, 1, 2)
    X_test = X_test.transpose(0, 3, 1, 2)

    mean_image = np.mean(X_train, axis=0)
    std = np.std(X_train)

    X_train -= mean_image
    X_val -= mean_image
    X_test -= mean_image

    X_train /= std
    X_val /= std
    X_test /= std

    return {
        'X_train': X_train, 'y_train': y_train,
        'X_val': X_val, 'y_val': y_val,
        'X_test': X_test, 'y_test': y_test,
        'mean': mean_image, 'std': std
    }


def load_CIFAR_batch(filename):
    ''' load single batch of cifar '''
    with open(filename, 'r') as f:
        datadict = pickle.load(f)
        X = datadict['data']
        Y = datadict['labels']
        X = X.reshape(10000, 3, 32, 32).transpose(0, 2, 3, 1).astype("float")
        Y = np.array(Y)
        return X, Y


def load(ROOT):
    ''' load all of cifar '''
    xs = []
    ys = []
    for b in range(1, 6):
        f = os.path.join(ROOT, 'data_batch_%d' % (b, ))
        X, Y = load_CIFAR_batch(f)
        xs.append(X)
        ys.append(Y)
    Xtr = np.concatenate(xs)
    Ytr = np.concatenate(ys)
    del X, Y
    Xte, Yte = load_CIFAR_batch(os.path.join(ROOT, 'test_batch'))
    return Xtr, Ytr, Xte, Yte
    
    
# ---
ModuleNotFoundError: No module named 'cPickle'

pip install pickle
