# step 1. data loading and architecture design

import numpy as np
from pydatset.cifar10 import get_CIFAR10_data

class NearestNeighbor():
    ...

Xtr, Ytr, Xte, Yte = load_CIFAR10('data/cifar10/') # Still I'm struggling with it
Xtr_rows = Xtr.reshape(Xtr.shape[0], 32 * 32 * 3)
Xte_rows = Xte.reshape(Xte.shape[0], 32 * 32 * 3)

nn = NearestNeighbor()
nn.train(Xtr_rows, Ytr)
Yte_predict = nn.predict(Xte_rows)
print ('accuracy: %f' + str(np.mean(Yte_predict == Yte)) )
# 38.6% for L1 and 35.4% for L2

# step 2. class definition 

class NearestNeighbor(object):
    def __init__(self):
        pass

    def train(self, X, Y):
        self.Xtr = X
        self.Ytr = Y

    def predict(self, X):
        num_test = X.shape[0]
        Ypred = np.zeros(num_test, dtype = self.Ytr.dtype)
        
        for i in range(num_test):
            distances = np.sum(np.abs(self.Xtr - X[i, :]), axis = 1) ## L1 distance
            # distances = np.sum(np.abs(self.Xtr - X[i, :]), axis = 1) ## L2 distance
            min_index = np.argmin(distances)
            Ypred[i] = self.ytr[min_index]
        return Ypred

# step 3. hyperparameter tuning
Xval_rows = Xtr_rows[:1000, :] # take first 1000 for validation
Yval = Ytr[:1000]
Xtr_rows = Xtr_rows[1000:, :] # keep last 49,000 for train
Ytr = Ytr[1000:]

validation_accuracies = []
for k in [1, 3, 5, 10, 20, 50, 100]:
    nn = NearestNeighbor()
    nn.train(Xtr_rows, Ytr)
    Yval_predict = nn.predict(Xval_rows, k = k)
    acc = np.mean(Yval_predict == Yval)
    print 'accuracy: %f' % (acc,)
    validation_accuracies.append((k, acc))
